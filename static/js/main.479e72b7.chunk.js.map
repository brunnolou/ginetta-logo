{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","cycle","t","Math","sin","PI","App","params","baseFrequencyX","baseFrequencyY","scale","animate","timestamp","_this","start","start1","start2","yP","xP","start3","dm","setAttribute","turb","requestAnimationFrame","this","_this2","react_default","a","createElement","className","class","width","viewBox","id","ref","node","type","baseFrequency","numOctaves","result","xChannelSelector","yChannelSelector","in","in2","x","y","height","flood-color","flood-opacity","mode","transform","d","preserveAspectRatio","style","filter","xlinkHref","clip-path","clipPathUnits","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.479e72b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nfunction cycle(t) {\n  return (Math.sin(Math.PI * 2 * t) + 1) / 2;\n}\n\nclass App extends Component {\n  params = {\n    baseFrequencyX: 0.03,\n    baseFrequencyY: 0.02,\n    scale: 30\n  };\n  componentDidMount() {\n    this.turb.setAttribute(\n      \"baseFrequency\",\n      this.params.baseFrequencyX + \" \" + this.params.baseFrequencyY\n    );\n    this.dm.setAttribute(\"scale\", this.params.scale);\n\n    this.animate();\n  }\n\n  animate = timestamp => {\n    if (!this.start) this.start = timestamp;\n    if (!this.start1) this.start1 = timestamp;\n    if (!this.start2) this.start2 = timestamp;\n    let p = cycle((timestamp - this.start) / 10000);\n    let yP = cycle((timestamp - this.start) / 15000);\n    let xP = cycle((timestamp - this.start) / 20000);\n    if (p > 1) this.start1 = 0;\n    if (yP > 1) this.start2 = 0;\n    if (xP > 1) this.start3 = 0;\n\n    this.dm.setAttribute(\"scale\", 10 + p * 20);\n\n    this.turb.setAttribute(\n      \"baseFrequency\",\n      this.params.baseFrequencyX * xP + \" \" + this.params.baseFrequencyY * yP\n    );\n    requestAnimationFrame(this.animate);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <svg class=\"svg\" width=\"100%\" viewBox=\"0 0 100 150\">\n          <defs>\n            <filter id=\"distortion\">\n              <feTurbulence\n                ref={node => (this.turb = node)}\n                type=\"fractalNoise\"\n                baseFrequency=\"0.000001\"\n                numOctaves=\"1\"\n                result=\"warp\"\n              />\n              <feDisplacementMap\n                ref={node => (this.dm = node)}\n                xChannelSelector=\"R\"\n                yChannelSelector=\"G\"\n                scale=\"60\"\n                in=\"SourceGraphic\"\n                in2=\"warp\"\n              />\n            </filter>\n\n            <filter id=\"tint\">\n              <feFlood\n                result=\"floodFill\"\n                x=\"0\"\n                y=\"0\"\n                width=\"100%\"\n                height=\"100%\"\n                flood-color=\"#888899\"\n                flood-opacity=\".8\"\n              />\n              <feBlend in=\"SourceGraphic\" in2=\"floodFill\" mode=\"multiply\" />\n            </filter>\n\n            <filter id=\"blend\">\n              <feFlood\n                result=\"floodFill\"\n                x=\"0\"\n                y=\"0\"\n                width=\"100%\"\n                height=\"100%\"\n                flood-color=\"#888888\"\n                flood-opacity=\".9\"\n              />\n              <feBlend in=\"SourceGraphic\" in2=\"floodFill\" mode=\"overlay\" />\n            </filter>\n\n            <clipPath id=\"logo-mask\">\n              <path\n                transform=\"translate(25,115) scale(.5,-.5)\"\n                // transform=\"translate(25,32.5) scale(.5,.5)\"\n                d=\"M50 136c-19.876 0-36-16.225-36-36h72c0 19.775-16.023 36-36 36zm0-50c-19.882 0-36-16.118-36-36s16.118-36 36-36 36 16.118 36 36-16.118 36-36 36z\"\n              />\n            </clipPath>\n          </defs>\n          <g>\n            <g>\n              <image\n                className=\"bg-img\"\n                preserveAspectRatio=\"xMinYMin slice\"\n                style={{ filter: \"url(#tint)\" }}\n                height=\"100%\"\n                width=\"100%\"\n                xlinkHref=\"./mountains.jpg\"\n              />\n            </g>\n            <g\n              transform=\"translate(0,150) scale(1,-1)\"\n              className=\"icon-container\"\n              clip-path=\"url(#logo-mask)\"\n            >\n              <image\n                class=\"icon\"\n                preserveAspectRatio=\"xMinYMin slice\"\n                style={{ filter: \"url(#distortion)\" }}\n                height=\"100%\"\n                width=\"100%\"\n                xlinkHref=\"./mountains.jpg\"\n              />\n            </g>\n          </g>\n        </svg>\n\n        <svg height=\"100%\" width=\"100%\">\n          <defs>\n            <clipPath id=\"svgPath\" clipPathUnits=\"userSpaceOnUse\">\n              <path d=\"M50 136c-19.876 0-36-16.225-36-36h72c0 19.775-16.023 36-36 36zm0-50c-19.882 0-36-16.118-36-36s16.118-36 36-36 36 16.118 36 36-16.118 36-36 36z\" />\n            </clipPath>\n          </defs>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}